// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Conference.Specflow.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class End_To_EndProcessOfGroupRegisteringForAConferenceByARegistrantWhenRequiredSeatsAreNotAvailableFeature : Xunit.IUseFixture<End_To_EndProcessOfGroupRegisteringForAConferenceByARegistrantWhenRequiredSeatsAreNotAvailableFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RegisterForConferenceAsRegistrantAndSeatsAreNotAvailable.feature"
#line hidden
        
        public End_To_EndProcessOfGroupRegisteringForAConferenceByARegistrantWhenRequiredSeatsAreNotAvailableFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "End-to-End process of group registering for a conference by a registrant when req" +
                    "uired seats are not available", "In order to attend conference\r\nAs a registrant\r\nI want to be able to register for" +
                    " the Conference for group of attendees, pay for the registration order and assoc" +
                    "iate attendees with the paid order automatically", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(End_To_EndProcessOfGroupRegisteringForAConferenceByARegistrantWhenRequiredSeatsAreNotAvailableFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "End-to-End process of group registering for a conference by a registrant when req" +
            "uired seats are not available")]
        [Xunit.TraitAttribute("Description", "View seat types for a given conference")]
        public virtual void ViewSeatTypesForAGivenConference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View seat types for a given conference", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I am on the CQRS summit 2012 conference site");
#line 22
 testRunner.When("I proceed to registration");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "rate"});
            table1.AddRow(new string[] {
                        "General admission",
                        "$199"});
            table1.AddRow(new string[] {
                        "Pre-con Workshop with Greg Young",
                        "$500"});
            table1.AddRow(new string[] {
                        "Additional cocktail party",
                        "$50"});
#line 23
 testRunner.Then("I should see the following details", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "End-to-End process of group registering for a conference by a registrant when req" +
            "uired seats are not available")]
        [Xunit.TraitAttribute("Description", "Make a registration order selection")]
        public virtual void MakeARegistrationOrderSelection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a registration order selection", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("the list of 3 seat types for the CQRS summit 2012 conference");
#line 36
 testRunner.And("only 1 seat available in General admission seat type");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "number of seats"});
            table2.AddRow(new string[] {
                        "General admission",
                        "2"});
            table2.AddRow(new string[] {
                        "Additional cocktail party",
                        "2"});
#line 37
 testRunner.When("I give the below details", ((string)(null)), table2);
#line 42
 testRunner.Then("I should see a message that only 1 seat is available");
#line 43
 testRunner.And("I should be provided a waitlist offer");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "End-to-End process of group registering for a conference by a registrant when req" +
            "uired seats are not available")]
        [Xunit.TraitAttribute("Description", "Accept waitlist offer and checkout")]
        public virtual void AcceptWaitlistOfferAndCheckout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accept waitlist offer and checkout", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "number of seats"});
            table3.AddRow(new string[] {
                        "General admission",
                        "1"});
            table3.AddRow(new string[] {
                        "Additional cocktail party",
                        "2"});
#line 46
testRunner.Given("the following seats are available", ((string)(null)), table3);
#line 52
testRunner.And("I accepted waitlist offer for 1 General admission seat");
#line 53
testRunner.Then("I should see the total of $299");
#line 54
testRunner.And("I should be able to proceed to checkout");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "End-to-End process of group registering for a conference by a registrant when req" +
            "uired seats are not available")]
        [Xunit.TraitAttribute("Description", "Checkout")]
        public virtual void Checkout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("the confirmed seats selection and the total amount");
#line 59
 testRunner.And("the time now is 12:00:00");
#line 60
 testRunner.When("I proceed to Checkout");
#line 61
 testRunner.And("I enter the registration details including name John Smith and email address John" +
                    "@smith.com");
#line 62
 testRunner.Then("I should be able to proceed to Payment");
#line 63
 testRunner.And("I should see the countdown at 15:00 minutes");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "End-to-End process of group registering for a conference by a registrant when req" +
            "uired seats are not available")]
        [Xunit.TraitAttribute("Description", "Payment")]
        public virtual void Payment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Payment", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("the confirmed seats selection and the total amount");
#line 68
 testRunner.And("the time now is 12:00:00");
#line 69
 testRunner.When("I give payment details");
#line 70
 testRunner.And("I proceed to confirm payment");
#line 71
 testRunner.Then("I receive confirmation message from payment");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "End-to-End process of group registering for a conference by a registrant when req" +
            "uired seats are not available")]
        [Xunit.TraitAttribute("Description", "ConfirmSeats")]
        public virtual void ConfirmSeats()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConfirmSeats", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
testRunner.Given("the payment is confirmed");
#line 75
testRunner.Then("I should receive confirmation with order number message on screen instantly");
#line 76
testRunner.And("I should receive message \'You will receive email regarding your registration shor" +
                    "tly\'");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                End_To_EndProcessOfGroupRegisteringForAConferenceByARegistrantWhenRequiredSeatsAreNotAvailableFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                End_To_EndProcessOfGroupRegisteringForAConferenceByARegistrantWhenRequiredSeatsAreNotAvailableFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
